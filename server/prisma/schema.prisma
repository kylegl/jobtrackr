generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlite"
  url               = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
}

model employee {
  id          String     @id @default(cuid())
  name        String
  phone       String?
  email       String?
  position    String
  isEmployed  Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workOrder   workOrder? @relation(fields: [workOrderId], references: [id])
  workOrderId String?
}

model company {
  id        String      @id @default(cuid())
  name      String
  phone     String?
  email     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  contacts  contact[]
  jobs      job[]
  bids      bid[]
  workOrder workOrder[]
}

model contact {
  id          String     @id @default(cuid())
  name        String
  phone       String?
  email       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  companyId   String?
  company     company?   @relation(fields: [companyId], references: [id])
  employeeId  String?
  jobs        job[]
  bids        bid[]
  workOrder   workOrder? @relation(fields: [workOrderId], references: [id])
  workOrderId String?
}

model property {
  id        String   @id @default(cuid())
  address   String
  gateCode  String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs      job[]
  bids      bid[]
}

model job {
  id             String      @id @default(cuid())
  name           String
  number         Int?
  prevailingWage Boolean
  isHourly       Boolean
  type           String?
  status         String
  contractTotal  Int?
  invoicedTotal  Int?
  paidTotal      Int?
  hours          Int?
  startAt        DateTime?
  closedAt       DateTime?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  company        company?    @relation(fields: [companyId], references: [id])
  companyId      String?
  contact        contact?    @relation(fields: [contactId], references: [id])
  contactId      String?
  property       property?   @relation(fields: [propertyId], references: [id])
  propertyId     String?
  bids           bid[]
  workOrders     workOrder[]
}

model bid {
  id             String    @id @default(cuid())
  name           String?
  number         Int?
  prevailingWage Boolean?
  status         String
  isHourly       Boolean
  type           String?
  total          Int?
  sentAt         DateTime?
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  company        company?  @relation(fields: [companyId], references: [id])
  companyId      String?
  contact        contact?  @relation(fields: [contactId], references: [id])
  contactId      String?
  property       property? @relation(fields: [propertyId], references: [id])
  propertyId     String?
  job            job?      @relation(fields: [jobId], references: [id])
  jobId          String?
}

model task {
  id          String     @id @default(cuid())
  description String?
  materials   String?
  hours       Int?
  number      Int
  startAt     DateTime?
  dueAt       DateTime?
  closedAt    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workOrder   workOrder? @relation(fields: [workOrderId], references: [id])
  workOrderId String?
}

model workOrder {
  id          String     @id @default(cuid())
  number      Int
  description String?
  status      String
  isHourly    Boolean
  type        String?
  startAt     DateTime?
  dueAt       DateTime?
  closedAt    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  job         job?       @relation(fields: [jobId], references: [id])
  jobId       String?
  company     company?   @relation(fields: [companyId], references: [id])
  companyId   String?
  contacts    contact[]
  employees   employee[]
  tasks       task[]
}
