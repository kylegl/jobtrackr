generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("SUPABASE_DATABASE_URL")
  shadowDatabaseUrl = env("SUPABASE_DATABASE_URL_SHADOW")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
}

model employee {
  id         String      @id @default(cuid())
  name       String
  phone      String?
  email      String?
  isEmployed Boolean
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  workorders workOrder[]
  title      jobTitle    @relation(fields: [titleId], references: [id])
  titleId    String
}

model jobTitle {
  id        String     @id @default(cuid())
  title     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees employee[]
}

model company {
  id        String      @id @default(cuid())
  name      String      @unique
  phone     String?
  email     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  contacts  contact[]
  jobs      job[]
  bids      bid[]
  workOrder workOrder[]
}

model contact {
  id         String      @id @default(cuid())
  name       String
  phone      String?
  email      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  company    company?    @relation(fields: [companyId], references: [id])
  companyId  String?
  jobs       job[]
  bids       bid[]
  workorders workOrder[]
}

model property {
  id        String   @id @default(cuid())
  address   String
  gateCode  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs      job[]
  bids      bid[]
}

model job {
  id               String      @id @default(cuid())
  name             String      @unique
  number           Int?        @unique
  isPrevailingWage Boolean
  isHourly         Boolean
  contractTotal    Int?
  invoicedTotal    Int?
  paidTotal        Int?
  hours            Int?
  startAt          DateTime?
  dueAt            DateTime?
  closedAt         DateTime?
  notes            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  type             jobType?    @relation(fields: [typeId], references: [id])
  typeId           String?
  status           String
  company          company?    @relation(fields: [companyId], references: [id])
  companyId        String?
  contacts         contact[]
  property         property?   @relation(fields: [propertyId], references: [id])
  propertyId       String?
  bids             bid[]
  workOrders       workOrder[]
}

model jobType {
  id   String @id @default(cuid())
  name String @unique
  jobs job[]
  bids bid[]
}

model bid {
  id               String    @id @default(cuid())
  name             String?   @unique
  number           Int?      @unique
  isPrevailingWage Boolean?
  isHourly         Boolean
  hours            Int?
  total            Int?
  sentAt           DateTime?
  dueAt            DateTime?
  closedAt         DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  property         property? @relation(fields: [propertyId], references: [id])
  propertyId       String?
  type             jobType?  @relation(fields: [typeId], references: [id])
  typeId           String?
  status           String
  companies        company[]
  contacts         contact[]
  jobs             job[]
}

model task {
  id          String     @id @default(cuid())
  description String?
  materials   String?
  hours       Int?
  number      Int
  startAt     DateTime?
  dueAt       DateTime?
  closedAt    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      String
  workOrder   workOrder? @relation(fields: [workOrderId], references: [id])
  workOrderId String?
}

model workOrder {
  id          String     @id @default(cuid())
  number      Int        @unique
  description String?
  isHourly    Boolean
  hours       Int?
  startAt     DateTime?
  dueAt       DateTime?
  closedAt    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  job         job?       @relation(fields: [jobId], references: [id])
  jobId       String?
  company     company?   @relation(fields: [companyId], references: [id])
  companyId   String?
  status      String
  contacts    contact[]
  employees   employee[]
  tasks       task[]
}
